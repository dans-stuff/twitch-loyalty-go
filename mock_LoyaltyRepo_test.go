// Code generated by mockery v1.0.0. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockLoyaltyRepo is an autogenerated mock type for the LoyaltyRepo type
type MockLoyaltyRepo struct {
	mock.Mock
}

// ChannelInfo provides a mock function with given fields:
func (_m *MockLoyaltyRepo) ChannelInfo() ChannelInfo {
	ret := _m.Called()

	var r0 ChannelInfo
	if rf, ok := ret.Get(0).(func() ChannelInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ChannelInfo)
	}

	return r0
}

// Cheer provides a mock function with given fields: user, amount
func (_m *MockLoyaltyRepo) Cheer(user string, amount int) error {
	ret := _m.Called(user, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(user, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gift provides a mock function with given fields: user, from
func (_m *MockLoyaltyRepo) Gift(user string, from string) error {
	ret := _m.Called(user, from)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(user, from)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: user
func (_m *MockLoyaltyRepo) Subscribe(user string) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserInfo provides a mock function with given fields: user
func (_m *MockLoyaltyRepo) UserInfo(user string) UserInfo {
	ret := _m.Called(user)

	var r0 UserInfo
	if rf, ok := ret.Get(0).(func(string) UserInfo); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(UserInfo)
	}

	return r0
}
